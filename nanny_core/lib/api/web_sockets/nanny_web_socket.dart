import 'dart:async';
import 'dart:convert';
import 'package:nanny_core/nanny_core.dart';

class NannyWebSocket {
  NannyWebSocket(this.tag, this.currentAddress);

  NannyWebSocket._(
    this.tag,
    this.currentAddress, {
    required this.channel,
    required this.stream,
    required this.sink,
  }) {
    _sub = stream.listen(
      (data) {
        Logger().i(
            "üì© [WebSocket] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ($tag):\n$data\nüîó –ê–¥—Ä–µ—Å: $currentAddress");
      },
      onError: (error) async {
        Logger().e("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ ($tag): $error");
        _connected = false;
        await reconnect();
      },
      onDone: () async {
        Logger().w(
            "‚ö†Ô∏è [WebSocket] –ü–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç ($tag). –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
        _connected = false;
        await reconnect();
      },
      cancelOnError: true,
    );
    _connected = true;
  }

  final String tag;
  final String currentAddress;
  late WebSocketChannel channel;
  late Stream stream;
  late WebSocketSink sink;
  late final StreamSubscription _sub;

  bool _connected = false;
  int _retryCount = 0;
  final int maxRetries = 5;
  final Duration retryDelay = Duration(seconds: 3);

  bool get connected => _connected;
  String get address => currentAddress;

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  Future<NannyWebSocket> connect() async {
    try {
      Logger().i("üîå [WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ $currentAddress ($tag)...");

      channel = WebSocketChannel.connect(Uri.parse(currentAddress));
      await channel.ready;
      _connected = true;
      _retryCount = 0;

      Logger().i("‚úÖ [WebSocket] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ($tag) –∫ $currentAddress");

      return NannyWebSocket._(
        tag,
        currentAddress,
        channel: channel,
        stream: channel.stream.asBroadcastStream(),
        sink: channel.sink,
      );
    } catch (e) {
      Logger().e("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ($tag): $e");
      reconnect();
      rethrow;
    }
  }

  /// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  Future reconnect() async {
    if (_retryCount >= maxRetries) {
      Logger()
          .w("‚è≥ [WebSocket] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ($maxRetries)");
      return;
    }

    _retryCount++;
    Logger().w(
        "üîÑ [WebSocket] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #$_retryCount —á–µ—Ä–µ–∑ ${retryDelay.inSeconds} —Å–µ–∫...");

    Future.delayed(retryDelay, () async {
      if (!_connected) {
        await connect();
      }
    });
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket
  Future<void> sinkValue(Map<String, dynamic> v, {bool encode = true}) async {
    try {
      final message = encode ? jsonEncode(v) : v;
      Logger().i("üì§ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ($tag): $message");
      sink.add(message);
    } catch (e) {
      Logger().e("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ($tag): $e");
      _connected = false;
      await reconnect();
    }
  }

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
  void dispose() {
    Logger().w("üõë [WebSocket] –ó–∞–∫—Ä—ã—Ç–∏–µ ($tag)...");
    _sub.cancel();
    sink.close();
    _connected = false;
  }
}
