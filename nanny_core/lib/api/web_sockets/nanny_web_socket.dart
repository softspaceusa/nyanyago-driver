import 'dart:async';

import 'package:nanny_core/nanny_core.dart';

class NannyWebSocket {
  NannyWebSocket(this.tag, this.currentAddress);

  NannyWebSocket._(
    this.tag,
    this.currentAddress, {
    required this.channel,
    required this.stream,
    required this.sink,
  }) {
    _sub = stream.listen(
      (data) {
        Logger().i(
            "üì© [WebSocket] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ($tag):\n$data\nüîó –ê–¥—Ä–µ—Å: $currentAddress");
      },
      onError: (error) {
        Logger().e("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ ($tag): $error");
      },
      onDone: () {
        Logger().w("‚ö†Ô∏è [WebSocket] –ü–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç ($tag)");
        _connected = false;
      },
      cancelOnError: true,
    );
    _connected = true;
  }

  final String tag;
  final String currentAddress;
  late WebSocketChannel channel;
  late Stream stream;
  late WebSocketSink sink;

  late final StreamSubscription _sub;
  bool _connected = false;

  bool get connected => _connected;

  String get address => currentAddress;

  Future<NannyWebSocket> connect() async {
    try {
      Logger().i("üîå [WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ $currentAddress ($tag)...");
      channel = WebSocketChannel.connect(Uri.parse(currentAddress));
      await channel.ready;
      _connected = true;
      Logger().i("‚úÖ [WebSocket] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ($tag) –∫ $currentAddress");

      return NannyWebSocket._(
        tag,
        currentAddress,
        channel: channel,
        stream: channel.stream.asBroadcastStream(),
        sink: channel.sink,
      );
    } catch (e) {
      Logger().e("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ($tag): $e");
      rethrow;
    }
  }

  Future<void> sinkValue(Map<String, dynamic> v,
      {bool encode = true, bool thenDecode = false}) async {
    try {
      //final message = encode ? jsonEncode(v) : v;
      Logger().i("üì§ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ($tag): $v");
      sink.add(v);
    } catch (e) {
      Logger().e("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ($tag): $e");
      _connected = false;
      await sink.close();
      Logger().i("üîÑ [WebSocket] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ($tag)...");
      channel = WebSocketChannel.connect(Uri.parse(currentAddress));
      await channel.ready;
      _connected = true;
      Logger().i("‚úÖ [WebSocket] –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ($tag)");
    }
  }

  void dispose() {
    Logger().w("üõë [WebSocket] –ó–∞–∫—Ä—ã—Ç–∏–µ ($tag)...");
    sink.close();
    _sub.cancel();
    _connected = false;
  }
}
